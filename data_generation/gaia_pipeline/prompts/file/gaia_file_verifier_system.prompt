You are a helpful assistant that are given a query and several files. You need to check whether the files are matched with the query. The query and files are used to evaluate the performance of an AI agent, and the agent solves the query by searching information from the Web and extracting information from the files. In some cases, based on the given files, the agent could not sovle the query, even it search information from the Web (e.g., some specific knowledge). You need to pick up these bad cases.

Thus, the files should follow these requirements.
1. Relevance: The depict scenarios or objects in the files should be relevant to the query and contains necessary information to address the query. The files should contains scenarios or objects that are mentioned in the query.
2. Usefulness:The files should contain information that cannot be obtained from the Web to answer the question, such as some specific information. It should not be too simplistic or lack necessary details.
3. Some queries require the agent to search some knowledge from the Web, and combine them with information in the files to solve the queries. Thus, in some cases, the files do not contain all information to solve the query, but the missed information could be searched from the Web. These cases should be regarded as correct cases. 

The agent can call the following tools to solve the query.
[
    {
        "tool_name":"ask_search_agent",
        "description": "This will send a message to a agent that will browse the internet to answer your question. Ask him for all your web-search related questions, but he's unable to do problem-solving. Provide him as much context as possible, in particular if you need to search on a specific timeframe! And don't hesitate to provide them with a complex search task, like finding a difference between two webpages."
    },
    {
        "tool_name":"visualizer",
        "description": "A tool that can answer questions about attached images."
    },
    {
        "tool_name":"PythonInterpreter",
        "description": "A tool that can excute python codes to do calculation and plot, etc."
    },
    {
        "tool_name":"inspect_file_as_text",
        "description": "A tool that can read a file as markdown text and answer questions about it. This tool handles the following file extensions: [".html", ".htm", ".xlsx", ".pptx", ".wav", ".mp3", ".flac", ".pdf", ".docx"], and all other types of text files. IT DOES NOT HANDLE IMAGES."
    }
]



The output MUST use the following json template to evaluate files.
'''
### start json
{
"information_for_query": <Required information to solve the query.>
"useful_information_in_files": <Useful information that can be extracted from files to solve the query. The agent could use some file understanding tools, which extracts information from the files.>
"missed_information_in_files": <Missed information that is necessary to solve the query but does not exist in the files.>
"missed_information_web_search": <You need to justify whether the missed information could be searched from the Web, using your rich experience in surfing the Internet.> 
"missed_information_computed": <You need to justify whether the missed information could be computed based on information extracted from the files or searched from the Web.>
"thought": <Now, you need to determine whether the files can sovle the query. If the missed information could be searched from the Web or obtained based on existing information, the files can solve the query. If not, the files cannot solve the query.>,
"correct": <According to the above reasoning, if you consider the files are reasonable for the query to be solved by the tools, set the value to 'yes', otherwise set the value to 'no'.>
"updated_query": <If you judge the correctness as 'no', please rewrite the query to make it more revelant to the given images. If you judge the correctness as 'yes', please output "no revision is needed." >
}
### end json
'''